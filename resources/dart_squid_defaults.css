/*
███████████████████████████████████████████████████████████████████████████████████████████
This file is where we maintain our "standard" framework selectors (and their styles) for
Application, Widgets and sub-classes.

See the Application and Widget classes in dartdocs ('classesCSS' property on each class)
for more information.

The framework ultimately gets the computed value of CSS styles applied to our Widgets,
via matching class-selector(s), using code like this (see application.dart):

    document.defaultView.getComputedStyle(mBackgroundRect,null).getPropertyValue("stroke")

███████████████████████████████████████████████████████████████████████████████████████████
*/

/*
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
BEGIN: STANDARD definitions.

For four-side-specs, remember TRBL (Top, Right, Bottom, Left) order of values.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
*/

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
This is the standard element used for application background
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.ApplicationCanvas {
    fill: #eeeeee;
    fill-opacity: 1;
    stroke: #aaaaff;
    stroke-width: 20px;
    stroke-opacity:   1;
    stroke-dasharray: 1,2;
}

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Any application "hints" will show styled as follows.  TODO: use in framework
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.Hint {
    fill: lemonchiffon;
    fill-opacity: 1;
    stroke: #333333;
    stroke-width: 1px;
}

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
The default font to be used mainly for things like simple Captions / Labels, etc.
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.DefaultFont {
    border: 0;
    padding: 0;
    margin: 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 14px;
    font-weight: normal;
    color: black;
}

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
The Application class will apply this styling to "Selected" widgets.
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.SelectedWidget {
    fill-opacity: .1;
    fill: black;
    stroke: gold;
    stroke-width: 4px;
}

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
* This is the default Widget setup.    SEE WIDGET DARTDOCS - classesCSS documentation.
*
* Our Widget layout closely relates to the [CSS box-model](http://www.w3.org/TR/CSS2/box.html)
*
* ### Styling of "Widget_Base" target parts:
*
* We use the following CSS properties:
*
*    * **margin** : Distance to inset Outer border (from [parentSvgElement] bounding box);
*        note that this can vary PER-SIDE.
*    * **padding** : Distance to inset [clientSvgElement] from inner border; this can also
*        vary PER-SIDE (e.g., padding-left)
*    * **fill** : Widget's background color
*    * **fill-opacity** : Widget's background opacity
*    * **stroke-opacity** : "Frame" opacity (all sides will be the same opacity);
*        border specifiers do not support opacity, so we use stroke-opacity for this.
*    * **border** : "Frame" width *and* color (with frame side(s) being optional: just specify zero-width).
*        Valid border sub-properties: ('border-top', 'border-right', 'border-bottom', 'border-left')
*        Note: border properties were used (instead of stroke-width) since SVG stroke-width
*        has no concept of "sides".
*        **NOTE: you must specify a border-type for it to be drawn** (e.g., solid) or it will default to 'none/0px'
*        even if you provide non-zero width.  E.g., choose 'border: 1px solid black;'
*    * **border-style** : "Frame" stroke style.
*        The *only supported style* is "solid" for "Frame", though our outer/inner borders support more styles.
*
*    * **border side-specifics** can be accessed via:
*         'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color' ('border-color')
*         'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style' ('border-style')
*         'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width' ('border-width')
*
*
* **NOTE: you must use a valid unit of measure (e.g., px, pt, em) after any sizes in
* your Widget-styling CSS or sizes will be interpreted as zero!**  (TODO: Only tested with "px" so far.)
* The getComputedStyle ==> getPropertyValue ==> yields *whole number values* (in px), but
* *requires* a specified UOM in stylesheet.  **Numbers without UOM suffix yield zero!**
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.Widget_Base {
    margin: 0px;
    padding: 10px;
    fill: skyblue;
    fill-opacity: 0.5;
}

.Widget_Frame {
    border: 10px #bdb76b;
    border-style: solid;  /*only valid border-style for our FRAME; IGNORED by Widget code currently, but MUST be set (see notes above)*/
    stroke-opacity:   1;
}


/*
═══════════════════════════════════════════════════════════════════════════════════════
SEE DARTDOCS

We use the following properties on our border selector to further Style the Widget's
optional Outer/Inner borders:

stroke-opacity  : BORDER opacity (all sides will be the same opacity)

border          : BORDER width AND color AND style.
    See notes (above; FRAME portion of base-widget), since our inner/outer borders
    make same use of properties, plus we add support for other border-styles.
    We support most http://www.w3.org/TR/CSS2/box.html#border-style-properties
    See widget.dart for eBorderStyle enumerated types of border-styles we support.
═══════════════════════════════════════════════════════════════════════════════════════
*/
.Widget_BorderOuter {
    border: 2px groove black;
    stroke-opacity:   .8;   /* BORDER opacity */
}

.Widget_BorderInner {
    border: 2px inset black;
    stroke-opacity:   1;    /* BORDER opacity */
}



/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Enumerate our STANDARD BORDER STYLE definitions here
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/

.NoneBorder {
    border: 0px none black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.SolidBorder {
    border: 1px solid black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.GrooveBorder {
    border: 1px groove black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.RidgeBorder {
    border: 1px ridge black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.OutsetBorder {
    border: 1px outset black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.InsetBorder {
    border: 1px inset black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.DoubleBorder {
    border: 1px double black;
    stroke-opacity:   1;  /*BORDER opacity*/
}

.RaisedBorder {
    border: 2px outset #3cb371;  /*combine with selector "UseVirtualBorder" to indicate our "raised" style*/
    stroke-opacity:   1;  /*BORDER opacity*/
}

.LoweredBorder {
    border: 2px inset black;  /*combine with selector "UseVirtualBorder" to indicate our "lowered" style*/
    stroke-opacity:   1;  /*BORDER opacity*/
}

.UseVirtualBorder {
    /* IMPORTANT: NEED THIS EMPTY DEFINITION HERE! */
}


/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Provide some standard selectors for "Button" Widget styling.
Currently used in sample-app non-fully-native-SVG buttons (i.e., using Html_Widget).
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.ButtonWidget_Base {
    margin: 2px;
    padding: 2px;
    fill: lightgray;
    fill-opacity: 1;
}

.ButtonWidget_Frame {
    border: 2px #d3d3d3;
    border-style: solid;
    stroke-opacity:   1;
}

.ButtonWidget_BorderOuter {
    border: 2px outset black;
    stroke-opacity:   1;
}

.ButtonWidget_BorderInner {
    border: 1px none #a9a9a9;
    stroke-opacity:   1;
}


/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Provide some standard selectors for "Checkbox" Widget styling.
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.CheckboxWidget_Base {
    margin: 2px;
    padding: 2px;
    fill: white;
    fill-opacity: 1;
}

.CheckboxWidget_Frame {
    border: 2px #333333;
    border-style: solid;
    stroke-opacity:   1;
}

.CheckboxWidget_BorderOuter {
    border: 0px none black;
    stroke-opacity:   1;
}

.CheckboxWidget_BorderInner {
    border: 0px solid black;
    stroke-opacity:   1;
}

/*
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
BEGIN: CSS USED BY SAMPLES WEB-PAGE(S)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
*/

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Samples Index Page Header Styles and other custom styling
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/

.Examples {
    font-family: "calibri, Arial, Helvetica", Sans-serif;
    font-size: 18px;
    padding: 8px 8px 24px 8px;
    text-align: justify;
    background-color: #636363;
    color: #CCC;
    border-bottom: 1px solid #828282;
}

div.Examples {
    font-family: "calibri, Arial, Helvetica", Sans-serif;
    font-size: 18px;
    padding: 8px 8px 24px 8px;
    text-align: justify;
    background-color: #636363;
    color: #CCC;
}

.Examples h1 {
    font-family: "Times New Roman, Arial, Helvetica", Sans-serif;
    text-align: center;
    font-size: 2.0em;
    margin-top: 6px;
    margin-bottom: 6px;
    font-weight: bold;
    color: white;
    text-decoration: none;
}


.Examples h2 {
    font-family: "Arial, Helvetica", Sans-serif;
    padding: 8px;
    margin-top: 12px;
    font-size: 1.5em;
    background-color: #3d3d3d;
    color: #DD7700;
    border-top: 1px solid white;
}

.Examples h3 {
    font-family: "Arial, Helvetica", Sans-serif;
    padding: 8px;
    margin: 0;
    font-size: 1.3em;
    background-color: #3d3d3d;
    color: #DD7700;
}

.Examples p {
    color: #CCC;
    font-family: "calibri, Arial, Helvetica", Sans-serif;
    font-size: 18px;
    padding: 0 0 8px 0;
}

.Examples a {
    color: #87cefa;
}

.Examples a:hover {
    background-color: #71b6e1;
    color: black;
}

.Examples b {
    color: #6EE6AD;
}

.Examples strong {
    color: #DD7700;
}


/*
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
TODO: OTHER STANDARD definitions here that need to be implemented yet
These are conceptual placeholders that are important for full-UI features.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
*/

/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
TODO: IN-PROGRESS / TESTING
This is the default Scrollbar class setup.
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
*/
.RightScrollbarMetrics {
    border: 0px solid white;  /*FRAME*/
    fill: white;
    fill-opacity: .1;
    margin  : 0 -10px 0 0;   /*Negative margin, equal to width of border/padding (of myWidget) moves us over the frame/border */
    padding : 1px;
}


/*
▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪
Application (level)...
InactiveWidgetColor : 'silver', InactiveTextFont, etc.
RequiredFieldsBackground {color: skyblue}
RequiredFieldsFont {font-weight: bold; font-color: black}
ReadOnlyFieldsBackground {color: grey}
ReadOnlyFieldsFont {stroke-opacity: 70; font italic, etc}
HintBackground   {fill    : 'lemonchiffon', fill-opacity: 70},

rect:hover {
  fill-opacity:     0.5;
  stroke-opacity:   0.5;
  stroke-dasharray: 1,2;

//the following did not work when applied to SVG elements... (webkit not implemented yet?)
@keyframes marquee {
	from {
		stroke: gold;
	}
	to  {
		stroke: red;
	}
}

}

*/
